# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_preprocessing.ipynb.

# %% auto 0
__all__ = ['get_files', 'get_clinical_data', 'get_tma_id', 'get_tma_spot']

# %% ../00_preprocessing.ipynb 3
from pathlib import Path
import os
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

Path.ls = lambda x: list(x.iterdir())

# %% ../00_preprocessing.ipynb 6
def _get_files(p, fs, extensions=None):
    p = Path(p)
    res = [p/f for f in fs if not f.startswith('.')
           and ((not extensions) or f'.{f.split(".")[-1].lower()}' in extensions)]
    return res

def get_files(path, extensions=None, recurse=False, include=None):
    "Source: fast.ai, Jeremy Howard"
    path = Path(path)
    extensions = {e.lower() for e in extensions}
    if recurse:
        res = []
        for i,(p,d,f) in enumerate(os.walk(path)): # returns (dirpath, dirnames, filenames)
            if include is not None and i==0: d[:] = [o for o in d if o in include]
            else:                            d[:] = [o for o in d if not o.startswith('.')]
            res += _get_files(p, f, extensions)
        return res
    else:
        f = [o.name for o in os.scandir(path) if o.is_file()]
        return _get_files(path, f, extensions)

# %% ../00_preprocessing.ipynb 11
import pandas as pd

# %% ../00_preprocessing.ipynb 13
def get_clinical_data(p):
    "p: path to directory with files"
    dfs = []
    for fn in p:
        df = pd.read_csv(fn, sep="\t", encoding = "ISO-8859-1", engine="python")
        df = df[df.columns.drop(list(df.filter(regex='Unnamed')))]
        df.insert(0, 'TMA_ID', fn.stem)
        dfs.append(df)
    return pd.concat(dfs)

# %% ../00_preprocessing.ipynb 17
def _get_tma_id(fn):
    """fn: pathlib path to file"""
    tma = fn.parent.name.split('_')[0]
    return tma[:-2] + tma[-2:].lstrip('0')

def get_tma_id(fns):
    """fns: list of pathlib paths"""
    return list(map(_get_tma_id, fns))

# %% ../00_preprocessing.ipynb 18
def _get_tma_spot(fn):
    """fn: pathlib path to file"""
    f = fn.stem[-1]+fn.stem[:-2]
    return f if len(f)==3 else f[0]+'0'+f[1] 

def get_tma_spot(fns):
    """fns: list of pathlib paths"""
    return list(map(_get_tma_spot, fns))

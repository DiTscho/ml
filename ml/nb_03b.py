# AUTOGENERATED! DO NOT EDIT! File to edit: ../03b_testing_patched_bags.ipynb.

# %% auto 0
__all__ = ['p_outx', 'p_outy', 'mean_img', 'std_img', 'mean_mask', 'std_mask', 'PatchedDataSet', 'split_df']

# %% ../03b_testing_patched_bags.ipynb 2
from pathlib import Path 

# %% ../03b_testing_patched_bags.ipynb 3
import pandas as pd

# %% ../03b_testing_patched_bags.ipynb 4
import matplotlib.pyplot as plt

# %% ../03b_testing_patched_bags.ipynb 5
from .nb_03_dataset import *

# %% ../03b_testing_patched_bags.ipynb 8
import torch.utils.data as data_utils

# %% ../03b_testing_patched_bags.ipynb 9
from PIL import Image

# %% ../03b_testing_patched_bags.ipynb 10
import torchvision.transforms as transforms

# %% ../03b_testing_patched_bags.ipynb 11
import numpy as np

# %% ../03b_testing_patched_bags.ipynb 12
import torch

# %% ../03b_testing_patched_bags.ipynb 13
import torchvision

# %% ../03b_testing_patched_bags.ipynb 14
import tqdm

# %% ../03b_testing_patched_bags.ipynb 16
class PatchedDataSet(data_utils.Dataset):

    """Returns a batch of N patches with the specified target in dataframe"""
    
    def __init__(self, 
                 img_path, # Path with images   
                 df, # pandas dataframe
                 y_col, # df column for target
                 stime_col, #df column with survival time
                 N, # number of patches
                 mean, #mean for normalization
                 std,  #std for normalization
                 trfms=None #list of transforms
                ):
        self.img_path = img_path
        self.df = df
        self.df.reset_index()
        self.y_col = y_col
        self.stime_col = stime_col
        self.N = N
        self.mean, self.std = mean, std
        self.trfm = trfms
        self.img_ids = self.get_img_ids()
        
    def get_img_ids(self):
        col = self.img_path.str()+"/"+self.df.TMA_ID+"_"+self.df.TMASpot
        return col.tolist()
                
        
    def __getitem__(self, idx):
        img_id = self.img_ids[idx]
        patch_paths = [img_id+"_"+str(i)+".png" for i in range(self.N)]
        patches = []
        
        transform = transforms.Compose([
            transforms.ToTensor()
            ])
        
        for p in patch_paths:
            img = Image.open(p)
            img = transform(img)
            
            if self.trfm is not None: 
                img = self.trfm(img)
            
            img = transforms.Normalize(self.mean, self.std)(img)
            patches.append(img)
            
        patches = torch.stack(patches, dim=0)
        
        return patches.clone().detach(), self.df.iloc[idx][self.y_col]
    
    def __len__(self):
        return len(self.img_ids)

# %% ../03b_testing_patched_bags.ipynb 17
p_outx = Path("/media/dimi/TOSHIBA EXT/patched_images")
p_outy = Path("/media/dimi/TOSHIBA EXT/patched_masks")

# %% ../03b_testing_patched_bags.ipynb 18
mean_img, std_img = [0.8868493, 0.7803772, 0.87521], [0.07292725, 0.09504553, 0.05757239]
mean_mask, std_mask = [0.04432359, 0.04432359, 0.04432359], [0.02483896, 0.02483896, 0.02483896]

# %% ../03b_testing_patched_bags.ipynb 36
def split_df(df, η=0.8 # percentage training
            ):
    msk = np.random.rand(len(df)) < η
    return df[msk], df[~msk]

# %% ../03b_testing_patched_bags.ipynb 44
import tqdm

# AUTOGENERATED! DO NOT EDIT! File to edit: ../02_patching.ipynb.

# %% auto 0
__all__ = ['tile']

# %% ../02_patching.ipynb 3
from pathlib import Path

# %% ../02_patching.ipynb 4
from .nb_01_processing import *

# %% ../02_patching.ipynb 5
import pandas as pd

# %% ../02_patching.ipynb 6
import matplotlib.pylab as plt

# %% ../02_patching.ipynb 12
import cv2

# %% ../02_patching.ipynb 13
Path.str = lambda x: str(x)

# %% ../02_patching.ipynb 16
import ipyplot

# %% ../02_patching.ipynb 17
def tile(img, mask, sz=128, N = 32):
    result = []
    shape = img.shape
    pad0,pad1 = (sz - shape[0]%sz)%sz, (sz - shape[1]%sz)%sz
    img = np.pad(img,[[pad0//2,pad0-pad0//2],[pad1//2,pad1-pad1//2],[0,0]],
                constant_values=255)
    mask = np.pad(mask,[[pad0//2,pad0-pad0//2],[pad1//2,pad1-pad1//2],[0,0]],
                constant_values=0)
    img = img.reshape(img.shape[0]//sz,sz,img.shape[1]//sz,sz,3)
    img = img.transpose(0,2,1,3,4).reshape(-1,sz,sz,3)
    mask = mask.reshape(mask.shape[0]//sz,sz,mask.shape[1]//sz,sz,3)
    mask = mask.transpose(0,2,1,3,4).reshape(-1,sz,sz,3)
    if len(img) < N:
        mask = np.pad(mask,[[0,N-len(img)],[0,0],[0,0],[0,0]],constant_values=0)
        img = np.pad(img,[[0,N-len(img)],[0,0],[0,0],[0,0]],constant_values=255)
        
    timg = img.reshape(img.shape[0],-1)
    tmask = mask.reshape(mask.shape[0],-1)
       
    idxs = np.argsort(~np.sum(tmask, axis=1))[:N]
    img = img[idxs]
    mask = mask[idxs]
    for i in range(len(img)):
        result.append({'img':img[i], 'mask':mask[i], 'idx':i})
    return result


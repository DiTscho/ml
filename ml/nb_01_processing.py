# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_processing_dataframe.ipynb.

# %% auto 0
__all__ = ['most_recent_date', 'oldest_date', 'ProcessDataframe']

# %% ../01_processing_dataframe.ipynb 3
from .nb_00_preprocessing import pd

# %% ../01_processing_dataframe.ipynb 4
import numpy as np

# %% ../01_processing_dataframe.ipynb 6
import re

# %% ../01_processing_dataframe.ipynb 7
def most_recent_date(df):
    """df must be Pandas dataframe with date columns only"""
    col = df.max(axis=1)
    col[col==pd.Timestamp("1800-01-01")] = pd.NaT
    return col
def oldest_date(df):
    """df must be Pandas dataframe with date columns only"""
    col = df.min(axis=1)
    col[col==pd.Timestamp("1800-01-01")] = pd.NaT
    return col

# %% ../01_processing_dataframe.ipynb 8
class ProcessDataframe:
    "Clean columns names, columns, define clinical parameter"
    def __init__(self,df): 
        self.df = df.copy()
        self.date_cols = ['EDatum', 'Tod_Datum', 'letzteEE', 'EE2', 'EE3', 'Rezidivdatum_2011', 
                          'Rezidivdatum2011_2', 'Rezidivdatum_2015', 'Rezidivdatum_2020']
        
        self.date_of_receit = ["EDatum"]
        self.last_contacts = ['letzteEE', 'EE2', 'EE3']
        self.recurrences = ['Rezidivdatum_2011', 'Rezidivdatum2011_2', 'Rezidivdatum_2015', 'Rezidivdatum_2020']
        self.deaths = ["Tod_Datum"]
    
    def clean_cols(self):
        """Removes unreadable characters for Pandas"""
        self.df.columns = self.df.columns.str.replace(r'[/,., '  ',-]', '',regex=True)
        self.df.columns = self.df.columns.str.replace(r'%', 'percent',regex=True)
    
    def to_date(self, cols): 
        self.df[cols] = self.df[cols].apply(lambda col: col.str.extract(r'(\d{2}.\d{2}.\d{4})', expand=False))
        self.df[cols] = self.df[cols].apply(lambda x: pd.to_datetime(x, format="%d.%m.%Y"))

    def add_stimes(self, 
                   date_of_receit, 
                   last_contacts:list, # columns with updated followups    
                   recurrences:list, # columns with updated recurrences
                   deaths:list): # columns with updated deaths
        """Defines survival times based on recurrence or death"""
    
        self.df["date_of_receit"] = self.df[date_of_receit]
        self.df["date_of_last_contact"] = most_recent_date(self.df[last_contacts])
        self.df["date_of_recurrence"] = most_recent_date(self.df[recurrences])
        self.df["date_of_death"] = oldest_date(self.df[deaths])
        
        self.df["date_of_recurrence"] = self.df["date_of_recurrence"]
        self.df.loc[pd.isnull(self.df["date_of_recurrence"]), "date_of_recurrence"] = self.df.loc[pd.isnull(self.df["date_of_recurrence"]), "date_of_last_contact"] 
        self.df["stime_recurrence"] = np.abs((self.df["date_of_recurrence"] - self.df["date_of_receit"]).dt.days/365)
        
        self.df["stime_metastasis"] = self.df["stime_recurrence"]
    
        self.df["stime_death"] = self.df["date_of_death"]
        self.df.loc[pd.isnull(self.df["stime_death"]), "stime_death"] = self.df.loc[pd.isnull(self.df["stime_death"]), "date_of_last_contact"] 
        self.df["stime_death"] = np.abs((self.df["stime_death"] - self.df["date_of_receit"]).dt.days/365)
        
        self.df["stime"] = (self.df["date_of_last_contact"] - self.df["date_of_receit"]).dt.days/365
        self.df.loc[self.df["stime_death"]>self.df["stime"],"stime"] = self.df.loc[self.df["stime_death"]>self.df["stime"],"stime_death"]
        
        self.df["status_death"] = 0
        self.df.loc[~pd.isnull(self.df["date_of_death"]), "status_death"] = 1
      
    def _add_year_survival(self, 
                       event_name:str, #new survival event column name like event_5year 
                       time_name:str, #new survival time column name like stime_5year 
                       event:str, # actual column name with status info
                       time:str, # actual column name with survival time
                       s:int): # threshold for survival in years

        self.df[event_name] = self.df[event]
        self.df.loc[self.df[time]>=s, event_name] = 0
    
        self.df[time_name] = self.df[time]
        self.df.loc[self.df[time]>=s, time_name] = s
        
    def add_cols(self, col_names:list, cols:list):
        for n,o in zip(col_names, cols):
            self.df[n] = o
            
    def add_year_survival(self, *pars): # parameters in `_add_year_survival` in same order
        pars = list(pars)
        for p in pars:
            self._add_year_survival(p[0],p[1],p[2],p[3],p[4])
            
    def process_data_in_one_step(self):
        
        self.clean_cols()
        self.to_date(self.date_cols)
        self.add_stimes(date_of_receit=self.date_of_receit,
                        last_contacts=self.last_contacts,
                        recurrences=self.recurrences,
                        deaths=self.deaths)
        self.add_cols(["event_recurrence", "event_metastasis", "event_death"], 
                        [self.df["Rezidiv_jn"], self.df["Metastase_jn"],  self.df["status_death"]] )
        self.add_cols(["event_dom"], # dor: death or metastasis
                        [(self.df.event_death.astype("int")) | (self.df.event_metastasis.astype("int"))]
                       )
        
        self.df["stime_dom"] = self.df["stime_metastasis"]  
        self.df.loc[self.df["event_death"]==1 ,"stime_dom"] = self.df.loc[self.df["event_death"]==1 ,"stime_death"]
        self.df.loc[self.df["event_metastasis"]==1 ,"stime_dom"] = self.df.loc[self.df["event_metastasis"]==1 ,"stime_metastasis"]
        
        self.add_year_survival(
                    ["event_5y_recurrence", "stime_5y_recurrence", "event_recurrence", "stime_recurrence", 5],
                    ["event_10y_recurrence", "stime_10y_recurrence", "event_recurrence", "stime_recurrence", 10],
                    ["event_5y_death", "stime_5y_death", "event_death", "stime_death", 5],
                    ["event_10y_death", "stime_10y_death", "event_death", "stime_death", 10],
                    ["event_5y_dom", "stime_5y_dom", "event_dom", "stime_dom", 5],
                    ["event_10y_dom", "stime_10y_dom", "event_dom", "stime_dom", 10]
        )
        print("Process done!")
